version: '2.4'  
# compose file version 2.x for local containers
# compose file version 3.x for docker swarm

volumes:
  public:
    driver: local

# The services correspond to the stages in the Dockerfile.
# The context is the folder that we set when we build that stage.
# Run the command:
# docker-compose build
# to build the test/release images.
services:
  test:
    build:
      context: .
      dockerfile: Dockerfile
      target: test
  release:
    build:
      context: .
      dockerfile: Dockerfile
    environment:   # These environment variables are added to the container
      DJANGO_SETTINGS_MODULE: todobackend.settings_release  # The location of hhe code that
                                                            # provides django support. It's in
                                                            # todobackend/settings_release.py.
                                                            # In todobackend dir, we have
                                                            # __init__.py. So we can specify
                                                            # this as
                                                            # todobackend.settings_release
      MYSQL_HOST: db
      MYSQL_USER: todo
      MYSQL_PASSWORD: password
  app:
    extends:
      service: release
    ports:
      - 8000:8000  # host port : container port
    depends_on:
      db:
        condition: service_healthy # the db service must have passed a docker health check
                                    # before docker compose will attempt to start the release
                                    # service.
    volumes:
      - public:/public  # Django requires you to run a separate manage.py management task
                        # called collectstatic, which generates static content and places it
                        # at the location defined by STATIC_ROOT.
                        # Django serves all static content from the /static path.
                        # We will create an external volume and run a container
                        # that executes the collectstatic task, generating the
                        # static files in that volume. Then mount the external volume
                        # to /static.
                        # One good thing about this is that the python interpreter is not called
                        # when serving static pages.
    healthcheck:
      test: curl -fs localhost:8000  # Checks connectivity to the local webserver endpoint.
      interval: 3s
      retries: 10
    ports:
      - 8000       # dynamic port mapping. If you say here 8000:8000, it means the
                   # the host_port:container_port mapping. In the case of dynamic mapping,
                   # the container_port is 8000, and the host_port is dynamic. This is useful
                   # in a cloud host where other tenants can be using the port you want.
                   # Use the command:
                   # docker-compose port app 8000
                   # to find the host port.
    command:       # command to run when container starts up, with command arguments
      - uwsgi
      - --http-socket=0.0.0.0:8000
      - --module=todobackend.wsgi
      - --master
      - --check-static=/public
      - --die-on-term    # Listen to SIGTERM signal to kill uwsgi process.
                         # SIGTERM is issued when you run make clean.
      - --processes=6
      - --threads=2
  acceptance:
    extends:
      service: release
    depends_on:
      app:
        condition: service_healthy
    environment:
      APP_URL: http://app:8000
    command:  # Run acceptance tests once the app service is healthy
      - bats
      - acceptance.bats
  migrate:
    extends:
      service: release  # We want to extend the release service for migrate so we can
                        # inherit the release image and release service settings.
                        # We had depends_on on the release service.
                        # But, we cannot extend a service that has a depends_on statement.
                        # So, instead, we removed the depends_on, ports, and command
                        # parameters from the release, and created a new service called app
                        # onto which we added those parameters. Now we can extend the release
                        # service
    depends_on:
      db:
        condition: service_healthy
    command:
      - python3
      - manage.py
      - migrate
      - --no-input
  db:  # db is the name of the service.
       # The todobackend has a src/todobackend/settings_release.py file
       # which configures support for MySQL as the database backend.
       # The settings in this db section's environment section
       # must match what is in that file.
    image: mysql:5.7  # Specify external image.
    healthcheck: # Docker will run the command in the test property under this healthcheck
                 # to verify the health of the db service.
                 # The mysqlshow command will only return a successful 0 exit code once the
                 # MySQL process is accepting connections.
                 # Because docker compose will evaluate $ in the compose file, we pass in
                 # $$MYSQL_USER for ex which will convert to $MYSQL_USER when the command
                 # is issued.
      test: mysqlshow -u $$MYSQL_USER -p$$MYSQL_PASSWORD
      interval: 3s  # Issue the command every 3 seconds
      retries: 10   # Retry 10 times.
    environment:      # to configure MySQL. 
      MYSQL_DATABASE: todobackend
      MYSQL_USER: todo
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: password

